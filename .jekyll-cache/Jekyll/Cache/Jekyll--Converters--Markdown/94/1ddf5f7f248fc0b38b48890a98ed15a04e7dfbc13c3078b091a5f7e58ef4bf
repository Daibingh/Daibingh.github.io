I"l.<ul id="markdown-toc">
  <li><a href="#git-学习资源" id="markdown-toc-git-学习资源">git 学习资源</a></li>
  <li><a href="#核心理解" id="markdown-toc-核心理解">核心理解</a>    <ul>
      <li><a href="#三个区域" id="markdown-toc-三个区域">三个区域</a></li>
      <li><a href="#提交" id="markdown-toc-提交">提交</a></li>
      <li><a href="#head" id="markdown-toc-head">HEAD</a></li>
      <li><a href="#合并" id="markdown-toc-合并">合并</a></li>
    </ul>
  </li>
  <li><a href="#本地常用操作" id="markdown-toc-本地常用操作">本地常用操作</a>    <ul>
      <li><a href="#本地新建添加提交" id="markdown-toc-本地新建添加提交">本地新建、添加、提交</a></li>
      <li><a href="#查看删除暂存区文件" id="markdown-toc-查看删除暂存区文件">查看、删除暂存区文件</a></li>
      <li><a href="#分支新建切换删除合并重命名" id="markdown-toc-分支新建切换删除合并重命名">分支新建、切换、删除、合并、重命名</a></li>
      <li><a href="#移动-head-到指定提交分支标签切换" id="markdown-toc-移动-head-到指定提交分支标签切换">移动 HEAD 到指定提交、分支、标签（切换）</a></li>
      <li><a href="#版本回退与文件恢复" id="markdown-toc-版本回退与文件恢复">版本回退与文件恢复</a></li>
      <li><a href="#修改提交覆盖提交" id="markdown-toc-修改提交覆盖提交">修改提交（覆盖提交）</a></li>
    </ul>
  </li>
  <li><a href="#与远程仓github交互" id="markdown-toc-与远程仓github交互">与远程仓（github）交互</a>    <ul>
      <li><a href="#建立-ssh-连接" id="markdown-toc-建立-ssh-连接">建立 ssh 连接</a></li>
      <li><a href="#本地仓与远程仓关联" id="markdown-toc-本地仓与远程仓关联">本地仓与远程仓关联</a>        <ul>
          <li><a href="#本地先有" id="markdown-toc-本地先有">本地先有</a></li>
          <li><a href="#远程先有" id="markdown-toc-远程先有">远程先有</a></li>
        </ul>
      </li>
      <li><a href="#本地与远程的同步" id="markdown-toc-本地与远程的同步">本地与远程的同步</a></li>
      <li><a href="#其它" id="markdown-toc-其它">其它</a></li>
    </ul>
  </li>
  <li><a href="#gitignore-规则" id="markdown-toc-gitignore-规则">gitignore 规则</a></li>
  <li><a href="#git-别名" id="markdown-toc-git-别名">git 别名</a></li>
  <li><a href="#github-pages-教程" id="markdown-toc-github-pages-教程">github pages 教程</a></li>
</ul>

<h2 id="git-学习资源">git 学习资源</h2>

<ul>
  <li><a href="https://git-scm.com/book/zh/v2">Git-book</a></li>
  <li><a href="http://marklodato.github.io/visual-git-guide/index-zh-cn.html#basic-usage">Git 图解</a></li>
</ul>

<h2 id="核心理解">核心理解</h2>

<h3 id="三个区域">三个区域</h3>

<ul>
  <li>工作目录</li>
  <li>索引（暂存区）</li>
  <li>历史</li>
</ul>

<p><img src="http://marklodato.github.io/visual-git-guide/basic-usage.svg" alt="" /></p>

<h3 id="提交">提交</h3>

<p>git的提交是文件历史状态的快照 ，Git 中的分支，其实本质上仅仅是个指向 commit 对象的可变指针。Git 会使用 master 作为分支的默认名字。在若干次提交后，你其实已经有了一个指向最后一次提交对象的 master 分支，它在每次提交的时候都会自动向前移动。</p>

<h3 id="head">HEAD</h3>

<p>Git 是如何知道你当前在哪个分支上工作的呢？其实答案也很简单，它保存着一个名为 HEAD 的特别指针。它是一个指向你正在工作中的本地分支的指针（译注：将 HEAD 想象为当前分支的别名）。每次提交后 HEAD 随着当前分支一起向前移动 。切换到哪个分支，哪个分支就成为自动向前移动的指针HEAD。 HEAD^ 代表上一次提交的版本，HEAD^^ 代表上上次提交的版本，HEAD~100 表示上 100 次提交的版本</p>

<h3 id="合并">合并</h3>

<p>合并分两种情况，fast-forward(快进)，分叉合并。前者中两个分支是直系亲属，后者，没有直系关系，但是有共同的祖先。</p>

<h2 id="本地常用操作">本地常用操作</h2>

<h3 id="本地新建添加提交">本地新建、添加、提交</h3>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="nb">mkdir </span>rep_name
<span class="nb">cd </span>rep_name
git init <span class="c"># 本地仓初始化</span>
...
git add <span class="nb">.</span> <span class="c"># 添加到索引</span>
git commit <span class="nt">-m</span> <span class="s1">'xxx'</span> <span class="c"># 提交到历史</span>
git status <span class="c"># 查看状态</span>
git log <span class="nt">--graph</span> <span class="nt">--pretty</span><span class="o">=</span>oneline <span class="nt">--abbrev-commit</span> <span class="c"># 查看提交、合并历史</span>
</code></pre></div></div>

<h3 id="查看删除暂存区文件">查看、删除暂存区文件</h3>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git ls-files <span class="c"># 查看</span>
git <span class="nb">rm</span> <span class="nt">-r</span> <span class="nt">--cached</span> &lt;file_name&gt;
</code></pre></div></div>

<h3 id="分支新建切换删除合并重命名">分支新建、切换、删除、合并、重命名</h3>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git branch # 查看分支列表
git branch &lt;branch_name&gt; # 新建分支
git checkout &lt;branch_name&gt; # 切换分支
git branch -b &lt;branch_name&gt; # 新建分支并切换
git branch -d &lt;branch_name&gt; # 删除分支

# 切换到 master 分支，与另一个分支合并
git checkout master
git merge &lt;branch_name&gt;
git branch -m &lt;old_name&gt; &lt;new_name&gt; # 分支重命名
</code></pre></div></div>

<h3 id="移动-head-到指定提交分支标签切换">移动 HEAD 到指定提交、分支、标签（切换）</h3>

<p>每一次提交都是一个历史节点，而 HEAD、分支、标签分布在部分历史节点之上。</p>

<p>git checkout <branch_name> | <tag_name> | <commit_id> # 移动 HEAD 到指定分支、标签、提交（索引和工作目录同步改变）</commit_id></tag_name></branch_name></p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git checkout HEAD~ <span class="c"># 将head指向上一次提交的节点，同时恢复索引和工作目录，分支指向不动</span>
</code></pre></div></div>

<h3 id="版本回退与文件恢复">版本回退与文件恢复</h3>

<ul>
  <li>恢复上一次提交到索引 <code class="highlighter-rouge">git reset HEAD &lt;file&gt;</code></li>
  <li>恢复索引到工作目录 <code class="highlighter-rouge">git checkout -- &lt;file&gt;</code></li>
  <li>版本回退 <code class="highlighter-rouge">git reset --hard &lt;commit_id&gt; | HEAD^</code>  <strong>注： 与切换分之不同</strong>
    <ul>
      <li>重新回到回退之前版本，使用 <code class="highlighter-rouge">git reflog</code> 找到对应的 commit id</li>
    </ul>
  </li>
</ul>

<h3 id="修改提交覆盖提交">修改提交（覆盖提交）</h3>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git commit <span class="nt">--amend</span>
git commit <span class="nt">--amend</span> <span class="nt">--no-edit</span>
</code></pre></div></div>

<h2 id="与远程仓github交互">与远程仓（github）交互</h2>

<h3 id="建立-ssh-连接">建立 ssh 连接</h3>

<ul>
  <li>本地安装 git</li>
  <li>产生密钥
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   ssh-keygen <span class="nt">-t</span> rsa
   <span class="c"># 之后输入三个回车</span>
</code></pre></div>    </div>
  </li>
  <li>将 <code class="highlighter-rouge">C:\Users\Administrator\.ssh\id_rsa.pub</code> 中的公钥添加到 github 个人账户</li>
  <li>测试
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>   ssh <span class="nt">-T</span> git@github.com
</code></pre></div>    </div>
  </li>
</ul>

<h3 id="本地仓与远程仓关联">本地仓与远程仓关联</h3>

<h4 id="本地先有">本地先有</h4>

<ul>
  <li>在 github 新建仓库</li>
  <li>本地与远程建立关联
    <div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  git remote add origin git@github.com:username/rep_name.git <span class="c"># 建立关联</span>
  git remote <span class="c"># 查看与之关联的远程仓</span>
  git remote remove origin <span class="c"># 取消与远程仓的关联</span>
</code></pre></div>    </div>
  </li>
</ul>

<h4 id="远程先有">远程先有</h4>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git clone git@github.com:username/rep_name.git <span class="c"># 默认 clone master 分支</span>
git clone <span class="nt">-b</span> &lt;branch_name&gt; &lt;address&gt; <span class="c"># clone 指定分支</span>
</code></pre></div></div>

<h3 id="本地与远程的同步">本地与远程的同步</h3>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git fetch origin &lt;branch_name&gt; <span class="c"># 下载远程分支到本地</span>
git pull origin &lt;branch_name&gt; <span class="c"># 下载远程分支到本地，并与当前分支合并</span>
git push origin &lt;branch_name&gt; <span class="c"># 上传当前分支，并与远程仓指定分支合并</span>
</code></pre></div></div>

<h3 id="其它">其它</h3>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git branch <span class="nt">-r</span> <span class="c"># 查看远程分支</span>
</code></pre></div></div>

<h2 id="gitignore-规则">gitignore 规则</h2>

<p>新建 .gitignore 文件，在其中添加 git 命令忽略的目录。但是，.gitignore 只能忽略那些原来没有被 track 的文件，如果某些文件已经被纳入了版本管理中，则修改 .gitignore 是无效的，解决办法：</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code>git <span class="nb">rm</span> <span class="nt">-r</span> <span class="nt">--cached</span> <span class="nb">.</span>
git add <span class="nb">.</span>
git commit <span class="nt">-m</span> <span class="s1">'update .gitignore'</span>
</code></pre></div></div>

<h2 id="git-别名">git 别名</h2>

<p>建议直接复制更改 <code class="highlighter-rouge">.gitconfig</code> 文件</p>

<div class="language-sh highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="o">[</span>user]
	email <span class="o">=</span> daibingh@gmail.com
	name <span class="o">=</span> daibingh
<span class="o">[</span><span class="nb">alias</span><span class="o">]</span>
	st <span class="o">=</span> status
	co <span class="o">=</span> checkout
	ci <span class="o">=</span> commit
	br <span class="o">=</span> branch
	lg <span class="o">=</span> log <span class="nt">--color</span> <span class="nt">--graph</span> <span class="nt">--pretty</span><span class="o">=</span>format:<span class="s1">'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&lt;%an&gt;%Creset'</span> <span class="nt">--abbrev-commit</span>

</code></pre></div></div>

<h2 id="github-pages-教程">github pages 教程</h2>

<ul>
  <li><a href="https://help.github.com/categories/github-pages-basics/">github pages 基础</a></li>
  <li><a href="https://help.github.com/categories/customizing-github-pages/">自定义 github pages</a></li>
</ul>
:ET